/*Guia Completo de JavaScript - Fundamentos

ðŸ“œ Sintaxe BÃ¡sica e Estruturas
Bem-vindo aos fundamentos do JavaScript! Aqui, vamos explorar a sintaxe essencial que forma a base da linguagem.

*/

/*VariÃ¡veis e Constantes
Em JavaScript, usamos variÃ¡veis para armazenar 
dados que podem mudar e constantes para dados 
que nÃ£o devem ser alterados apÃ³s a atribuiÃ§Ã£o inicial.
*/

/*var: A forma mais antiga de declarar variÃ¡veis
Possui escopo de funÃ§Ã£o ou global
Menos usado em cÃ³digo moderno
*/
var nomeAntigo = "Ana";
nomeAntigo = "Carlos"; //Pode ser reatribuÃ­do

var nomeAntigo = "Julia"; // Pode ser redeclarado (nÃ£o recomendado)
console.log(nomeAntigo); // SaÃ­da: Julia

/*let: Introduzido no ES6
Permite declarar variÃ¡veis com escopo de bloco*/

let idade = 30;
idade = 31; // Pode ser reatribuÃ­do
let idade = 32; // Erro! NÃ£o pode ser redeclarado no mesmo escopo

console.log(idade); // SaÃ­da: 31

if (true) {
  let dentroDoBloco = "VisÃ­vel aqui";
  console.log(dentroDoBloco); // SaÃ­da: VisÃ­vel aqui
}

/* console.log(dentroDoBloco); // Erro! fora de escopo
const: Constantes com escopo de bloco
O valor nÃ£o pode ser reatribuÃ­do*/

const PI = 3.14159;
// PI = 3.14; // Erro! NÃ£o pode ser reatribuÃ­do
console.log(PI); // SaÃ­da: 3.14159

const pessoa = { nome: "Mariana" };
pessoa.nome = "Mariana Silva"; // Funciona! O objeto em si pode ser modificado
// pessoa = { nome: "JoÃ£o" }; // Erro! NÃ£o pode reatribuir a constante

console.log(pessoa.nome); // SaÃ­da: Mariana Silva

//Tipos de Dados Primitivos
//SÃ£o os blocos de construÃ§Ã£o bÃ¡sicos dos dados em JavaScript.

//String
//SequÃªncia de caracteres, usada para texto.

let saudacao = "OlÃ¡, mundo!";
let nome = 'JoÃ£o';
let frase = `Bem-vindo, ${nome}!`; // Template literals

console.log(frase); // SaÃ­da: Bem-vindo, JoÃ£o!
Number

//Representa nÃºmeros, tanto inteiros quanto de ponto flutuante.

let quantidade = 10;
let preco = 19.99;
let naoUmNumero = NaN; // Not a Number
let infinito = Infinity;
console.log(quantidade, preco); // SaÃ­da: 10 19.99

//Boolean
//Representa valores lÃ³gicos: true ou false.

let ativo = true;
let finalizado = false;
console.log(ativo); // SaÃ­da: true
//Null

//Representa a ausÃªncia intencional de um valor de objeto.

let usuario = null;
console.log(usuario); // SaÃ­da: null
//Undefined

//Indica que uma variÃ¡vel foi declarada, mas ainda nÃ£o teve um valor atribuÃ­do.

let descricao;
console.log(descricao); // SaÃ­da: undefined

//Symbol (ES6)
//Tipo de dado cujas instÃ¢ncias sÃ£o Ãºnicas e imutÃ¡veis.

const idUnico = Symbol('descricaoUnica');
console.log(idUnico); // SaÃ­da: Symbol(descricaoUnica)

//BigInt (ES2020)
//Usado para representar inteiros maiores que o limite seguro para Number.

const numeroMuitoGrande = 9007199254740991n; // 'n' no final indica BigInt
const outroGrande = BigInt("12345678901234567890");
console.log(numeroMuitoGrande + 1n); // SaÃ­da: 9007199254740992n

/*Operadores
SÃ­mbolos que realizam operaÃ§Ãµes em valores (operandos).

AritmÃ©ticos
+ (adiÃ§Ã£o)
- (subtraÃ§Ã£o)
* (multiplicaÃ§Ã£o)
/ (divisÃ£o)
% (mÃ³dulo/resto)
** (exponenciaÃ§Ã£o - ES7)
*/

let soma = 10 + 5; // 15
let produto = 4 * 3; // 12
let resto = 10 % 3;  // 1
let potencia = 2 ** 3; // 8

AtribuiÃ§Ã£o
= (atribuiÃ§Ã£o simples)
+=, -=, *=, /=, %=
let x = 10;
x += 5; // equivalente a x = x + 5; (x agora Ã© 15)

ComparaÃ§Ã£o
== (igual a - compara valor, faz coerÃ§Ã£o de tipo)
=== (estritamente igual a - compara valor e tipo)
!= (diferente de)
!== (estritamente diferente de)
> (maior que)
< (menor que)
>= (maior ou igual a)
<= (menor ou igual a)

console.log(5 == "5");    // true (coerÃ§Ã£o de tipo)
console.log(5 === "5");   // false (tipos diferentes)
console.log(10 > 5);      // true